//
//  CenteringVerification.swift
//  MedidorOticaApp
//
//  Verifica√ß√£o de Centraliza√ß√£o do Rosto
//
//  Objetivo:
//  - Garantir que o rosto esteja perfeitamente centralizado na c√¢mera
//  - Manter o alinhamento preciso entre os olhos e o nariz
//  - Fornecer feedback visual sobre o posicionamento
//
//  Crit√©rios de Aceita√ß√£o:
//  1. Centraliza√ß√£o horizontal (eixo X) com margem de ¬±0.5cm
//  2. Centraliza√ß√£o vertical (eixo Y) com margem de ¬±0.5cm
//  3. Alinhamento do nariz com o centro da c√¢mera
//
//  T√©cnicas Utilizadas:
//  - ARKit Face Tracking para detec√ß√£o precisa de pontos faciais
//  - C√°lculos 3D para determinar o posicionamento relativo
//  - Toler√¢ncia ajust√°vel para diferentes cen√°rios de uso
//
//  Notas de Desempenho:
//  - Processamento otimizado para execu√ß√£o em tempo real
//  - Uso eficiente de mem√≥ria com reutiliza√ß√£o de estruturas
//  - C√°lculos otimizados para evitar sobrecarga na CPU/GPU

import ARKit
import Vision
import UIKit

// MARK: - Extens√µes

extension Notification.Name {
    /// Notifica√ß√£o enviada quando o status de centraliza√ß√£o do rosto √© atualizado
    static let faceCenteringUpdated = Notification.Name("faceCenteringUpdated")
}

// MARK: - Extens√£o para verifica√ß√£o de centraliza√ß√£o
extension VerificationManager {
    
    // MARK: - Constantes
    
    private enum CenteringConstants {
        // Toler√¢ncia de 0.5cm convertida para metros
        static let tolerance: Float = 0.005
        
        // √çndices dos v√©rtices na malha facial do ARKit
        struct FaceIndices {
            static let leftEye = 1220   // Centro aproximado do olho esquerdo
            static let rightEye = 1940  // Centro aproximado do olho direito
            static let noseTip = 9130   // Ponta do nariz
        }
    }
    
    // MARK: - Verifica√ß√£o de Centraliza√ß√£o
    
    /// Verifica se o rosto est√° corretamente centralizado na c√¢mera
    /// - Parameters:
    ///   - frame: O frame AR atual (n√£o utilizado, mantido para compatibilidade)
    ///   - faceAnchor: O anchor do rosto detectado pelo ARKit
    /// - Returns: Booleano indicando se o rosto est√° perfeitamente centralizado
    func checkFaceCentering(using frame: ARFrame, faceAnchor: ARFaceAnchor) -> Bool {
        // Obt√©m a geometria 3D do rosto do ARKit
        let vertices = faceAnchor.geometry.vertices
        
        // Valida se temos v√©rtices suficientes para an√°lise
        guard vertices.count > CenteringConstants.FaceIndices.noseTip else {
            print("‚ùå Geometria facial incompleta para an√°lise de centraliza√ß√£o")
            return false
        }
        
        // Extrai as posi√ß√µes dos pontos faciais relevantes
        let leftEyePos = vertices[CenteringConstants.FaceIndices.leftEye]
        let rightEyePos = vertices[CenteringConstants.FaceIndices.rightEye]
        let nosePos = vertices[CenteringConstants.FaceIndices.noseTip]
        
        // Calcula o ponto m√©dio entre os olhos (deve estar alinhado com o centro da c√¢mera)
        let midEyeX = (leftEyePos.x + rightEyePos.x) / 2
        let midEyeY = (leftEyePos.y + rightEyePos.y) / 2
        
        // Calcula os desvios em rela√ß√£o ao centro (origem no espa√ßo da c√¢mera)
        let horizontalOffset = midEyeX
        let verticalOffset = midEyeY
        let noseOffset = nosePos.x
        
        // Verifica se os desvios est√£o dentro da toler√¢ncia permitida
        let isHorizontallyAligned = abs(horizontalOffset) < CenteringConstants.tolerance
        let isVerticallyAligned = abs(verticalOffset) < CenteringConstants.tolerance
        let isNoseAligned = abs(noseOffset) < CenteringConstants.tolerance
        
        // O rosto est√° centralizado se todos os crit√©rios forem atendidos
        let isCentered = isHorizontallyAligned && isVerticallyAligned && isNoseAligned
        
        // Atualiza a interface do usu√°rio com os resultados
        updateCenteringUI(
            horizontalOffset: horizontalOffset,
            verticalOffset: verticalOffset,
            noseOffset: noseOffset,
            isCentered: isCentered
        )
        
        return isCentered
    }
    
    // MARK: - Atualiza√ß√£o da Interface
    
    /// Atualiza a interface do usu√°rio com os resultados da verifica√ß√£o de centraliza√ß√£o
    private func updateCenteringUI(horizontalOffset: Float, verticalOffset: Float, 
                                 noseOffset: Float, isCentered: Bool) {
        // Converte as medidas para cent√≠metros para exibi√ß√£o
        let horizontalCm = horizontalOffset * 100
        let verticalCm = verticalOffset * 100
        let noseCm = noseOffset * 100
        
        // Log detalhado para debug
        print("""
        üìè Centraliza√ß√£o (cm):
           - Horizontal: \(String(format: "%+.2f", horizontalCm)) cm
           - Vertical:   \(String(format: "%+.2f", verticalCm)) cm
           - Nariz:      \(String(format: "%+.2f", noseCm)) cm
           - Alinhado:   \(isCentered ? "‚úÖ" : "‚ùå")
        """)
        
        // Atualiza a interface na thread principal
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            
            // Atualiza as propriedades de estado
            self.faceAligned = isCentered
            self.faceCentered = isCentered
            
            // Armazena os desvios para feedback visual
            self.facePosition = [
                "x": horizontalCm,
                "y": verticalCm,
                "z": noseCm
            ]
            
            // Notifica a interface sobre a atualiza√ß√£o
            self.notifyCenteringUpdate()
        }
    }
    
    /// Notifica a interface sobre a atualiza√ß√£o do status de centraliza√ß√£o
    private func notifyCenteringUpdate() {
        NotificationCenter.default.post(
            name: .faceCenteringUpdated,
            object: nil,
            userInfo: [
                "isCentered": faceAligned,
                "offsets": facePosition ?? [:],
                "timestamp": Date().timeIntervalSince1970
            ]
        )
    }
}
