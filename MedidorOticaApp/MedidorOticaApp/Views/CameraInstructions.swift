//
//  CameraInstructions.swift
//  MedidorOticaApp
//
//  Componente de instru√ß√µes para a c√¢mera
//

import SwiftUI

struct CameraInstructions: View {
    let verificationManager: VerificationManager
    
    var body: some View {
        VStack(spacing: 8) {
            // Verifica quais instru√ß√µes exibir com base nas verifica√ß√µes pendentes
            // Mostra instru√ß√µes espec√≠ficas para a primeira verifica√ß√£o que falhar
            if !verificationManager.faceDetected {
                instructionView(text: "‚úçÔ∏è Posicione seu rosto no oval para detectar suas fei√ß√µes")
            } else if !verificationManager.distanceCorrect {
                distanceInstructionView()
            } else if !verificationManager.faceAligned {
                centeringInstructionView()
            } else if !verificationManager.headAligned {
                headAlignmentInstructionView()
            } else if !verificationManager.gazeCorrect {
                // Quando chegar na verifica√ß√£o de olhar, exibe instru√ß√µes especiais
                gazeInstructionView()
            } else {
                instructionView(text: "‚úÖ Perfeito! Pronto para capturar a imagem")
            }
        }
    }
    
    // View padr√£o para instru√ß√µes simples
    private func instructionView(text: String) -> some View {
        Text(text)
            .font(.headline)
            .foregroundColor(.white)
            .padding(.horizontal, 20)
            .padding(.vertical, 8)
            .background(Color.black.opacity(0.6))
            .cornerRadius(10)
    }
    
    // View espec√≠fica para instru√ß√µes de dist√¢ncia
    private func distanceInstructionView() -> some View {
        let diff: Int
        let instruction: String
        
        if verificationManager.lastMeasuredDistance < verificationManager.minDistance {
            // Muito perto, precisa se afastar
            diff = Int(verificationManager.minDistance - verificationManager.lastMeasuredDistance)
            instruction = "‚¨ÖÔ∏è Afaste-se aproximadamente \(diff) cm do celular para obter a dist√¢ncia ideal"
        } else {
            // Muito longe, precisa se aproximar
            diff = Int(verificationManager.lastMeasuredDistance - verificationManager.maxDistance)
            instruction = "‚û°Ô∏è Aproxime-se aproximadamente \(diff) cm do celular para obter a dist√¢ncia ideal"
        }
        
        return instructionView(text: instruction)
    }
    
    // View espec√≠fica para instru√ß√µes de centraliza√ß√£o
    private func centeringInstructionView() -> some View {
        // Usa os dados de posi√ß√£o do rosto para dar instru√ß√µes espec√≠ficas
        let xPos = verificationManager.facePosition["x"] ?? 0
        let yPos = verificationManager.facePosition["y"] ?? 0
        
        var instruction = "Centralize seu rosto no oval"
        
        // Determina a dire√ß√£o com base na posi√ß√£o atual
        if abs(xPos) > abs(yPos) {
            // Movimento horizontal mais importante
            if xPos > 0.01 {
                instruction = "‚¨ÖÔ∏è Mova seu celular para direita aproximadamente \(Int(abs(xPos)*100)) cm"
            } else if xPos < -0.01 {
                instruction = "‚û°Ô∏è Mova seu celular para esquerda aproximadamente \(Int(abs(xPos)*100)) cm"
            }
        } else {
            // Movimento vertical mais importante
            if yPos > 0.01 {
                instruction = "‚¨ÜÔ∏è Mova seu celular para baixo aproximadamente \(Int(abs(yPos)*100)) cm"
            } else if yPos < -0.01 {
                instruction = "‚¨áÔ∏è Mova seu celular para cima aproximadamente \(Int(abs(yPos)*100)) cm"
            }
        }
        
        return instructionView(text: instruction)
    }
    
    // View espec√≠fica para instru√ß√µes de alinhamento da cabe√ßa
    private func headAlignmentInstructionView() -> some View {
        // Usa os dados de alinhamento para dar instru√ß√µes espec√≠ficas
        let roll = verificationManager.alignmentData["roll"] ?? 0
        let yaw = verificationManager.alignmentData["yaw"] ?? 0
        let pitch = verificationManager.alignmentData["pitch"] ?? 0
        
        var instruction = "Mantenha sua cabe√ßa reta, sem inclina√ß√£o"
        
        // Determina qual rota√ß√£o precisa de maior corre√ß√£o
        if abs(roll) > max(abs(yaw), abs(pitch)) && abs(roll) > 2 {
            let direction = roll > 0 ? "anti-hor√°rio" : "hor√°rio"
            instruction = "‚Ü∫Ô∏è Gire sua cabe√ßa no sentido \(direction) aproximadamente \(Int(abs(roll))) graus"
        } else if abs(yaw) > abs(pitch) && abs(yaw) > 2 {
            let direction = yaw > 0 ? "esquerda" : "direita"
            instruction = "‚§µÔ∏è Vire sua cabe√ßa para \(direction) aproximadamente \(Int(abs(yaw))) graus"
        } else if abs(pitch) > 2 {
            let direction = pitch > 0 ? "cima" : "baixo"
            instruction = "‚§¥Ô∏è Incline sua cabe√ßa para \(direction) aproximadamente \(Int(abs(pitch))) graus"
        }
        
        return instructionView(text: instruction)
    }
    
    // View espec√≠fica para instru√ß√µes de olhar
    private func gazeInstructionView() -> some View {
        VStack(spacing: 12) {
            instructionView(text: "üëÅÔ∏è Olhe diretamente para a lente da c√¢mera, sem desviar o olhar")
            
            // Destaque visual para a c√¢mera
            CameraHighlight()
        }
    }
}

// View para o menu de verifica√ß√µes laterais
struct VerificationMenu: View {
    let verificationManager: VerificationManager
    
    var body: some View {
        VStack(alignment: .trailing, spacing: 4) {
            // Contador de verifica√ß√µes
            HStack {
                let completedCount = verificationManager.verifications.filter { $0.isChecked && !$0.type.isOptional }.count
                let requiredCount = verificationManager.verifications.filter { !$0.type.isOptional }.count
                
                Text("\(completedCount)/\(requiredCount)")
                    .font(.caption)
                    .foregroundColor(.white)
                
                // Indicador de progresso
                ZStack(alignment: .leading) {
                    RoundedRectangle(cornerRadius: 4)
                        .frame(width: 50, height: 8)
                        .foregroundColor(.gray.opacity(0.5))
                    
                    RoundedRectangle(cornerRadius: 4)
                        .frame(width: requiredCount > 0 ? 50 * CGFloat(completedCount) / CGFloat(requiredCount) : 0, height: 8)
                        .foregroundColor(verificationManager.allVerificationsChecked ? .green : .orange)
                }
            }
            
            // Todas as verifica√ß√µes (obrigat√≥rias e opcionais)
            ForEach(verificationManager.verifications) { verification in
                HStack(spacing: 6) {
                    let simplifiedText = simplifyVerificationText(verification.text)

                    Text(verification.isChecked ? "OK" : simplifiedText)
                        .font(.caption)
                        .foregroundColor(.white)

                    Circle()
                        .foregroundColor(verification.isChecked ? .green : .red)
                        .frame(width: 8, height: 8)
                }
            }
        }
        .padding(.vertical, 8)
        .padding(.horizontal, 12)
        .background(Color.black.opacity(0.6))
        .cornerRadius(12)
        .frame(maxWidth: .infinity, alignment: .trailing)
        .padding(.trailing, 20)
    }
    
    // Fun√ß√£o para simplificar os textos das verifica√ß√µes no menu lateral
    private func simplifyVerificationText(_ text: String) -> String {
        // Mapeando textos longos para vers√µes mais curtas com emoji
        switch text.lowercased() {
        case let t where t.contains("rosto detectado"):
            return "üë§ Rosto"
        case let t where t.contains("dist√¢ncia"):
            return "üìç Dist√¢ncia"
        case let t where t.contains("centraliz"):
            return "‚¨úÔ∏è Centrado"
        case let t where t.contains("alinha"):
            return "üïØÔ∏è Alinhado"
        case let t where t.contains("cabe√ßa"):
            return "üß† Cabe√ßa"
        case let t where t.contains("olhar") || t.contains("gaze"):
            return "üëÅÔ∏è Olhar"
        case let t where t.contains("frame") || t.contains("borda"):
            return "üñºÔ∏è Borda"
        default:
            // Se n√£o encontrar um padr√£o conhecido, retorna os primeiros 10 caracteres
            return text.count > 10 ? String(text.prefix(10)) + "..." : text
        }
    }
}
